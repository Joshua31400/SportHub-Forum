-- Table USER
CREATE TABLE IF NOT EXISTS user (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    userName VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    createdAt DATETIME NOT NULL
);

-- Table SESSION
CREATE TABLE IF NOT EXISTS session (
    id INT PRIMARY KEY AUTO_INCREMENT,
    userid INT NOT NULL,
    sessiontoken VARCHAR(255) NOT NULL,
    expiresat VARCHAR(255) NOT NULL,
    FOREIGN KEY (userid) REFERENCES user(userid)
);

-- Table CATEGORIE
CREATE TABLE IF NOT EXISTS category (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(255) NOT NULL
);

-- Table PUBLICATION
CREATE TABLE IF NOT EXISTS post (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    titre VARCHAR(255) NOT NULL,
    contenu TEXT NOT NULL,
    image_url VARCHAR(255),
    created_at DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user(userID)
);

-- Table POST_CATEGORIE
CREATE TABLE IF NOT EXISTS post_category (
    post_id INT NOT NULL,
    categorie_id INT NOT NULL,
    PRIMARY KEY (post_id, categorie_id),
    FOREIGN KEY (post_id) REFERENCES post(id),
    FOREIGN KEY (categorie_id) REFERENCES category(id)
);

-- Table COMMENTAIRE
CREATE TABLE IF NOT EXISTS comment (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    contenu TEXT NOT NULL,
    created_at DATETIME NOT NULL,
    FOREIGN KEY (post_id) REFERENCES post(id),
    FOREIGN KEY (user_id) REFERENCES user(userID)
);

-- Table LIKE_POST
CREATE TABLE IF NOT EXISTS like_post (
    user_id INT NOT NULL,
    post_id INT NOT NULL,
    type ENUM('like', 'dislike') NOT NULL,
    PRIMARY KEY (user_id, post_id),
    FOREIGN KEY (user_id) REFERENCES user(userID),
    FOREIGN KEY (post_id) REFERENCES post(id)
);

-- Table LIKE_COMMENT
CREATE TABLE IF NOT EXISTS like_comment (
    user_id INT NOT NULL,
    comment_id INT NOT NULL,
    type ENUM('like', 'dislike') NOT NULL,
    PRIMARY KEY (user_id, comment_id),
    FOREIGN KEY (user_id) REFERENCES user(userID),
    FOREIGN KEY (comment_id) REFERENCES comment(id)
);